package ca.cgjennings.apps.librivox;

import static ca.cgjennings.apps.librivox.Checker.string;
import ca.cgjennings.apps.librivox.validators.Validator;
import ca.cgjennings.apps.librivox.validators.ValidatorFactory;
import ca.cgjennings.platform.PlatformSupport;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JCheckBox;

/**
 * Dialog for selecting which validators to run.
 *
 * @author Christopher G. Jennings https://cgjennings.ca/contact/
 * @since 0.92
 */
class ChooseValidatorDialog extends javax.swing.JDialog {

    private Validator[] exemplars;
    private JCheckBox[] boxes;
    private String[] descriptions;

    /**
     * Creates new form ChooseValidatorDialog
     */
    public ChooseValidatorDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        getRootPane().setDefaultButton(okBtn);
        PlatformSupport.correctOKCancelOrder(okBtn, cancelBtn);

        ActionListener validatorForcingFn = (ActionEvent e) -> {
            int i = 0;
            for (; i < boxes.length; ++i) {
                if (boxes[i].isSelected()) {
                    break;
                }
            }
            PlatformSupport.getOK(okBtn, cancelBtn).setEnabled(i < boxes.length);
        };

        exemplars = ValidatorFactory.getFactory().createAllValidators();
        boxes = new JCheckBox[exemplars.length];
        for (int i = 0; i < exemplars.length; ++i) {
            JCheckBox b = new JCheckBox(exemplars[i].toString());
            final int fi = i;
            b.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    descField.setText(exemplars[fi].getDescription());
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    descField.setText("");
                }
            });
            b.addActionListener(validatorForcingFn);
            b.setSelected(ValidatorFactory.isClassEnabled(exemplars[i].getClass()));
            checkPanel.add(b);
            boxes[i] = b;
        }

        pack();
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoLabel = new javax.swing.JLabel();
        checkPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        descScroll = new javax.swing.JScrollPane();
        descField = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        checkAllBtn = new javax.swing.JButton();
        uncheckAllBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(string("cv-title")); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        infoLabel.setText(string("cv-info")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 12, 32);
        getContentPane().add(infoLabel, gridBagConstraints);

        checkPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 6));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 8);
        getContentPane().add(checkPanel, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        okBtn.setText(string("cv-ok")); // NOI18N
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });
        jPanel1.add(okBtn);

        cancelBtn.setText(string("cancel")); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        jPanel1.add(cancelBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 8);
        getContentPane().add(jPanel1, gridBagConstraints);

        descScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        descScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        descField.setEditable(false);
        descField.setColumns(20);
        descField.setLineWrap(true);
        descField.setRows(3);
        descField.setTabSize(4);
        descField.setWrapStyleWord(true);
        descField.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        descField.setDisabledTextColor(java.awt.Color.darkGray);
        descField.setEnabled(false);
        descScroll.setViewportView(descField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 8, 8, 8);
        getContentPane().add(descScroll, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4)));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 4));

        checkAllBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/checkall.png"))); // NOI18N
        checkAllBtn.setToolTipText(string("id3-checkall")); // NOI18N
        checkAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllBtnActionPerformed(evt);
            }
        });
        jPanel2.add(checkAllBtn);

        uncheckAllBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/uncheckall.png"))); // NOI18N
        uncheckAllBtn.setToolTipText(string("id3-uncheckall")); // NOI18N
        uncheckAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllBtnActionPerformed(evt);
            }
        });
        jPanel2.add(uncheckAllBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 8);
        getContentPane().add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

	private void okBtnActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_okBtnActionPerformed
            for (int i = 0; i < exemplars.length; ++i) {
                ValidatorFactory.setClassEnabled(exemplars[i].getClass(), boxes[i].isSelected());
            }
            Checker.flushSettings();
            dispose();
	}//GEN-LAST:event_okBtnActionPerformed

	private void cancelBtnActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_cancelBtnActionPerformed
            dispose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	private void checkAllBtnActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_checkAllBtnActionPerformed
            checkAll(evt.getSource() == checkAllBtn);
	}//GEN-LAST:event_checkAllBtnActionPerformed

    private void checkAll(boolean enable) {
        for (int i = 0; i < exemplars.length; ++i) {
            boxes[i].setSelected(enable);
        }
        PlatformSupport.getOK(okBtn, cancelBtn).setEnabled(enable);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton checkAllBtn;
    private javax.swing.JPanel checkPanel;
    private javax.swing.JTextArea descField;
    private javax.swing.JScrollPane descScroll;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton okBtn;
    private javax.swing.JButton uncheckAllBtn;
    // End of variables declaration//GEN-END:variables
}
