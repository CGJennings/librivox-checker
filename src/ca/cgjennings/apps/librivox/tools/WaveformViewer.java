/*
 * WaveformViewer.java
 *
 * Created on October 25, 2008, 4:25 AM
 */
package ca.cgjennings.apps.librivox.tools;

import ca.cgjennings.apps.librivox.*;
import ca.cgjennings.apps.librivox.decoder.AudioFrame;
import ca.cgjennings.apps.librivox.decoder.DecoderFactory;
import ca.cgjennings.apps.librivox.decoder.StreamDecoder;
import ca.cgjennings.apps.librivox.tools.WaveformImager;
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;

/**
 * Dynamically generate and display the waveform of an MP3
 *
 * @author Christopher G. Jennings https://cgjennings.ca/contact/
 */
public class WaveformViewer extends javax.swing.JDialog {

    private LibriVoxAudioFile file;
    private WaveformImager imager;
    private Thread decodeThread;

    /**
     * Creates new form WaveformViewer
     */
    public WaveformViewer(java.awt.Frame parent, LibriVoxAudioFile file) {
        super(parent, false);
        this.file = file;
        initComponents();
        setTitle(file.getFileName());
        imager = new WaveformImager();

        decodeThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    createWaveform();
                } catch (Exception e) {
                    Checker.getLogger().log(Level.WARNING, "Viewer Exception (probably not an MP3)", e);
                }
            }
        });
        decodeThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onWindowClosing(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void onWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowClosing
    decodeThread.interrupt();
}//GEN-LAST:event_onWindowClosing

    private void createWaveform() {
        File f = file.getLocalFile();
        InputStream in = null;
        try {
            in = new FileInputStream(f);
            in = new BufferedInputStream(in, 64 * 1024);

            int skipBytes = file.getMetadata().getStartOfAudio();
            if (skipBytes > 0) {
                in.skip(skipBytes);
            }

            StreamDecoder decoder = DecoderFactory.createDecoder(in);

            imager.initialize(file, null);
            imager.setDecoder(decoder);
            imager.beginAnalysis(decoder.getAudioHeader(), null);

            // now we know how big the image should be (stereo is double height)
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    getContentPane().add(imager.getViewer(), BorderLayout.CENTER);
                    pack();
                    Checker.popToEdge(WaveformViewer.this, -1);
                    setVisible(true);
                }
            });

            if (Thread.interrupted()) {
                return;
            }

            AudioFrame frame = decoder.getNextFrame();
            while (frame != null) {
                imager.analyzeFrame(frame);
                if (Thread.interrupted()) {
                    return;
                }
                frame = decoder.getNextFrame();
            }

            imager.endAnalysis();
        } catch (IOException e) {
            // TODO: handle errors
            getToolkit().beep();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
